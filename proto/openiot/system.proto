
syntax = "proto3";
package openiot;

enum EncryptionType {
    PLAIN = 0;
    AES_ECB = 1;
    AES_CBC = 2;
}

// Always unencrypted message header
// to be able to find decryption key by device id.
message Header {
    // Unique (at least within network) device ID.
    uint64 device_id = 100;
    // CRC of message data before encryption (if desired).
    fixed32 crc = 101;
    // Indicates that next message is KeyExchangeRequest/KeyExchangeResponse
    bool key_exchange = 102;
    // Indicates that next message is JoinRequest/JoinResponse
    bool join_request = 103;
    // Optional: for AES_CBC encoding
    bytes aes_iv = 104;
}

// A message followed by Header and describes common
// parameters for all device / controller messages.
message MessageInfo {
    // Auto-incremented sequence number to drop duplicates
    // uint32 should last about 136 years even if device / controller
    // will be sending messages every second
    uint32 sequence = 1;
    // Date & Time for RTC use case
    //
    // Server's time in BCD 24-hour format, e.g
    // HH:MM:SS
    // 0x102233 -> 10:22:33
    // 0x223344 -> 22:33:44
    uint32 time = 2;
    // Server's date in BCD format.
    // YY-MM-DD-WD
    // 0x20 10 11 01 -> Mon, Oct 11, 2020
    uint32 date = 3;
}

// Diffie-Hellman key exchange: device to controller.
message KeyExchangeRequest {
    // Diffie-Hellman modulus
    uint64 dh_p = 1;
    // Diffie-Hellman base
    uint64 dh_g = 2;
    // "Public" key of device
    repeated uint32 dh_a = 3;
    // Desired encryption type
    EncryptionType encryption_type = 4;
}

// Diffie-Hellman key exchange: controller to device.
message KeyExchangeResponse {
    repeated uint32 dh_b = 1;  // "public" key of controller
}

// Request to join IoT network from device.
// If device uses encryption it must complete key exchange
// before and encrypt JoinRequest as well.
message JoinRequest {
    // Names
    string name = 1;
    string manufacturer = 2;
    string product_url = 3;
    // Default DeviceHandler name
    string default_handler = 4;
    // Name of device message (in package.name format), e.g.:
    // "sensor.MultiSensor"
    string protobuf_name = 5;
}

// Request to join response from controller to device.
message JoinResponse {
    // Server's name
    string name = 1;
    // Server's timestamp
    int64 timestamp = 2;
}

// Deveice request to leave IoT network
message LeaveRequest {
    string reason = 1;
}

// Controller response to leave network request
message LeaveResponse {
    // Just confirmation from controller
}
