
syntax = "proto3";
package openiot;

message Header {
    // Unique (at least at given local network) device ID. It must always
    // be un-encrypted to let device/controller find decryption key.
    // Should also match Message.device_id
    uint64 device_id = 1;
    // Encryption parameters
    oneof encryption {
        bool plain = 5;
        bytes aes_iv = 6;
    }
}

message Message {
    // The same device id as in EcryptionHeader.
    // Serves mostly to validate successful decryption
    uint64 device_id = 1;
    // Auto-incremented sequence number to drop duplicates
    // Even if device / controller will be sending
    // updates every second - counter will last in about 136 years
    uint32 sequence = 2;

    // Actual message
    oneof message {
        bytes device_message = 5;
        bytes controller_message = 6;
        // System messages
        SystemJoinRequest system_join_request = 7;
        SystemJoinResponse system_join_response = 8;
        SystemLeaveRequest system_leave_request = 9;
        SystemLeaveResponse system_leave_response = 10;
        SystemDeviceInfoRequest system_device_info_request = 11;
        SystemDeviceInfoResponse system_device_info_response = 12;
    }
}

// Request to join IoT network from device.
// controller (server) must be in "accept" mode.
message SystemJoinRequest {
    // Diffie-Hellman key exchange parameters
    uint64 dh_p = 1;   // modulus
    uint64 dh_g = 2;   // base
    repeated uint32 dh_a = 3;  // "public" key of device
}

// Controller (server) response to JoinRequest
message SystemJoinResponse {
    // Diffie-Hellman key exchange parameters
    repeated uint32 dh_b = 1;  // "public" key of controller
}

// Deveice request to leave IoT network
message SystemLeaveRequest {
    string reason = 1;
}

// Controller response to leave network request
message SystemLeaveResponse {
    // Just confirmation from controller
}

// Controller to device request for addition information
message SystemDeviceInfoRequest {
    // Nothing, always request all information
}

// Device information. In response to controller's request
message SystemDeviceInfoResponse {
    string name = 1;
    string manufacturer = 2;
    string product_url = 3;
    string protobuf_url = 4;
}
