/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2-dev */

#ifndef PB_SENSOR_OPENIOT_SENSOR_MULTISENSOR_PB_H_INCLUDED
#define PB_SENSOR_OPENIOT_SENSOR_MULTISENSOR_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _sensor_Battery {
    uint32_t percent;
    uint32_t voltage_mv;
} sensor_Battery;

typedef struct _sensor_Humidity {
    uint32_t relative_percent;
} sensor_Humidity;

typedef struct _sensor_Temperature {
    float value_c;
    float value_f;
} sensor_Temperature;

typedef struct _sensor_MultiSensorStatus {
    bool has_temperature;
    sensor_Temperature temperature;
    bool has_humidity;
    sensor_Humidity humidity;
    bool has_battery;
    sensor_Battery battery;
} sensor_MultiSensorStatus;


/* Initializer values for message structs */
#define sensor_MultiSensorStatus_init_default    {false, sensor_Temperature_init_default, false, sensor_Humidity_init_default, false, sensor_Battery_init_default}
#define sensor_Temperature_init_default          {0, 0}
#define sensor_Humidity_init_default             {0}
#define sensor_Battery_init_default              {0, 0}
#define sensor_MultiSensorStatus_init_zero       {false, sensor_Temperature_init_zero, false, sensor_Humidity_init_zero, false, sensor_Battery_init_zero}
#define sensor_Temperature_init_zero             {0, 0}
#define sensor_Humidity_init_zero                {0}
#define sensor_Battery_init_zero                 {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define sensor_Battery_percent_tag               1
#define sensor_Battery_voltage_mv_tag            2
#define sensor_Humidity_relative_percent_tag     1
#define sensor_Temperature_value_c_tag           1
#define sensor_Temperature_value_f_tag           2
#define sensor_MultiSensorStatus_temperature_tag 1
#define sensor_MultiSensorStatus_humidity_tag    2
#define sensor_MultiSensorStatus_battery_tag     10

/* Struct field encoding specification for nanopb */
#define sensor_MultiSensorStatus_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  temperature,       1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  humidity,          2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  battery,          10)
#define sensor_MultiSensorStatus_CALLBACK NULL
#define sensor_MultiSensorStatus_DEFAULT NULL
#define sensor_MultiSensorStatus_temperature_MSGTYPE sensor_Temperature
#define sensor_MultiSensorStatus_humidity_MSGTYPE sensor_Humidity
#define sensor_MultiSensorStatus_battery_MSGTYPE sensor_Battery

#define sensor_Temperature_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    value_c,           1) \
X(a, STATIC,   SINGULAR, FLOAT,    value_f,           2)
#define sensor_Temperature_CALLBACK NULL
#define sensor_Temperature_DEFAULT NULL

#define sensor_Humidity_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   relative_percent,   1)
#define sensor_Humidity_CALLBACK NULL
#define sensor_Humidity_DEFAULT NULL

#define sensor_Battery_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   percent,           1) \
X(a, STATIC,   SINGULAR, UINT32,   voltage_mv,        2)
#define sensor_Battery_CALLBACK NULL
#define sensor_Battery_DEFAULT NULL

extern const pb_msgdesc_t sensor_MultiSensorStatus_msg;
extern const pb_msgdesc_t sensor_Temperature_msg;
extern const pb_msgdesc_t sensor_Humidity_msg;
extern const pb_msgdesc_t sensor_Battery_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define sensor_MultiSensorStatus_fields &sensor_MultiSensorStatus_msg
#define sensor_Temperature_fields &sensor_Temperature_msg
#define sensor_Humidity_fields &sensor_Humidity_msg
#define sensor_Battery_fields &sensor_Battery_msg

/* Maximum encoded size of messages (where known) */
#define sensor_MultiSensorStatus_size            34
#define sensor_Temperature_size                  10
#define sensor_Humidity_size                     6
#define sensor_Battery_size                      12

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
