// Code generated by protoc-gen-go. DO NOT EDIT.
// source: openiot/system.proto

package openiot

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EncryptionType int32

const (
	EncryptionType_PLAIN   EncryptionType = 0
	EncryptionType_AES_ECB EncryptionType = 1
	EncryptionType_AES_CBC EncryptionType = 2
)

var EncryptionType_name = map[int32]string{
	0: "PLAIN",
	1: "AES_ECB",
	2: "AES_CBC",
}

var EncryptionType_value = map[string]int32{
	"PLAIN":   0,
	"AES_ECB": 1,
	"AES_CBC": 2,
}

func (x EncryptionType) String() string {
	return proto.EnumName(EncryptionType_name, int32(x))
}

func (EncryptionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_477c448daeb2d28d, []int{0}
}

// Always unencrypted message header
// to be able to find decryption key by device id.
type Header struct {
	// Unique (at least within network) device ID.
	DeviceId uint64 `protobuf:"varint,100,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// CRC of message data before encryption (if desired).
	Crc uint32 `protobuf:"fixed32,101,opt,name=crc,proto3" json:"crc,omitempty"`
	// Indicates that next message is KeyExchangeRequest/KeyExchangeResponse
	KeyExchange bool `protobuf:"varint,102,opt,name=key_exchange,json=keyExchange,proto3" json:"key_exchange,omitempty"`
	// Indicates that next message is JoinRequest/JoinResponse
	JoinRequest bool `protobuf:"varint,103,opt,name=join_request,json=joinRequest,proto3" json:"join_request,omitempty"`
	// Optional: for AES_CBC encoding
	AesIv                []byte   `protobuf:"bytes,104,opt,name=aes_iv,json=aesIv,proto3" json:"aes_iv,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_477c448daeb2d28d, []int{0}
}

func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *Header) GetCrc() uint32 {
	if m != nil {
		return m.Crc
	}
	return 0
}

func (m *Header) GetKeyExchange() bool {
	if m != nil {
		return m.KeyExchange
	}
	return false
}

func (m *Header) GetJoinRequest() bool {
	if m != nil {
		return m.JoinRequest
	}
	return false
}

func (m *Header) GetAesIv() []byte {
	if m != nil {
		return m.AesIv
	}
	return nil
}

// A message followed by Header and describes common
// parameters for all device / controller messages.
type MessageInfo struct {
	// Auto-incremented sequence number to drop duplicates
	// uint32 should last about 136 years even if device / controller
	// will be sending messages every second
	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Date & Time for RTC use case
	//
	// Server's time in BCD 24-hour format, e.g
	// HH:MM:SS
	// 0x102233 -> 10:22:33
	// 0x223344 -> 22:33:44
	Time uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// Server's date in BCD format.
	// YY-MM-DD-WD
	// 0x20 10 11 01 -> Mon, Oct 11, 2020
	Date                 uint32   `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageInfo) Reset()         { *m = MessageInfo{} }
func (m *MessageInfo) String() string { return proto.CompactTextString(m) }
func (*MessageInfo) ProtoMessage()    {}
func (*MessageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_477c448daeb2d28d, []int{1}
}

func (m *MessageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageInfo.Unmarshal(m, b)
}
func (m *MessageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageInfo.Marshal(b, m, deterministic)
}
func (m *MessageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageInfo.Merge(m, src)
}
func (m *MessageInfo) XXX_Size() int {
	return xxx_messageInfo_MessageInfo.Size(m)
}
func (m *MessageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MessageInfo proto.InternalMessageInfo

func (m *MessageInfo) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *MessageInfo) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MessageInfo) GetDate() uint32 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Diffie-Hellman key exchange: device to controller.
type KeyExchangeRequest struct {
	// Diffie-Hellman modulus
	DhP uint64 `protobuf:"varint,1,opt,name=dh_p,json=dhP,proto3" json:"dh_p,omitempty"`
	// Diffie-Hellman base
	DhG uint64 `protobuf:"varint,2,opt,name=dh_g,json=dhG,proto3" json:"dh_g,omitempty"`
	// "Public" key of device
	DhA []uint32 `protobuf:"varint,3,rep,packed,name=dh_a,json=dhA,proto3" json:"dh_a,omitempty"`
	// Desired encryption type
	EncryptionType       EncryptionType `protobuf:"varint,4,opt,name=encryption_type,json=encryptionType,proto3,enum=openiot.EncryptionType" json:"encryption_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *KeyExchangeRequest) Reset()         { *m = KeyExchangeRequest{} }
func (m *KeyExchangeRequest) String() string { return proto.CompactTextString(m) }
func (*KeyExchangeRequest) ProtoMessage()    {}
func (*KeyExchangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_477c448daeb2d28d, []int{2}
}

func (m *KeyExchangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyExchangeRequest.Unmarshal(m, b)
}
func (m *KeyExchangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyExchangeRequest.Marshal(b, m, deterministic)
}
func (m *KeyExchangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyExchangeRequest.Merge(m, src)
}
func (m *KeyExchangeRequest) XXX_Size() int {
	return xxx_messageInfo_KeyExchangeRequest.Size(m)
}
func (m *KeyExchangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyExchangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyExchangeRequest proto.InternalMessageInfo

func (m *KeyExchangeRequest) GetDhP() uint64 {
	if m != nil {
		return m.DhP
	}
	return 0
}

func (m *KeyExchangeRequest) GetDhG() uint64 {
	if m != nil {
		return m.DhG
	}
	return 0
}

func (m *KeyExchangeRequest) GetDhA() []uint32 {
	if m != nil {
		return m.DhA
	}
	return nil
}

func (m *KeyExchangeRequest) GetEncryptionType() EncryptionType {
	if m != nil {
		return m.EncryptionType
	}
	return EncryptionType_PLAIN
}

// Diffie-Hellman key exchange: controller to device.
type KeyExchangeResponse struct {
	DhB                  []uint32 `protobuf:"varint,1,rep,packed,name=dh_b,json=dhB,proto3" json:"dh_b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyExchangeResponse) Reset()         { *m = KeyExchangeResponse{} }
func (m *KeyExchangeResponse) String() string { return proto.CompactTextString(m) }
func (*KeyExchangeResponse) ProtoMessage()    {}
func (*KeyExchangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_477c448daeb2d28d, []int{3}
}

func (m *KeyExchangeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyExchangeResponse.Unmarshal(m, b)
}
func (m *KeyExchangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyExchangeResponse.Marshal(b, m, deterministic)
}
func (m *KeyExchangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyExchangeResponse.Merge(m, src)
}
func (m *KeyExchangeResponse) XXX_Size() int {
	return xxx_messageInfo_KeyExchangeResponse.Size(m)
}
func (m *KeyExchangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyExchangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeyExchangeResponse proto.InternalMessageInfo

func (m *KeyExchangeResponse) GetDhB() []uint32 {
	if m != nil {
		return m.DhB
	}
	return nil
}

// Request to join IoT network from device.
// If device uses encryption it must complete key exchange
// before and encrypt JoinRequest as well.
type JoinRequest struct {
	// Names
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Manufacturer string `protobuf:"bytes,2,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	ProductUrl   string `protobuf:"bytes,3,opt,name=product_url,json=productUrl,proto3" json:"product_url,omitempty"`
	// Default DeviceHandler name
	DefaultHandler string `protobuf:"bytes,4,opt,name=default_handler,json=defaultHandler,proto3" json:"default_handler,omitempty"`
	// Name of device message (in package.name format), e.g.:
	// "sensor.MultiSensor"
	ProtobufName         string   `protobuf:"bytes,5,opt,name=protobuf_name,json=protobufName,proto3" json:"protobuf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRequest) Reset()         { *m = JoinRequest{} }
func (m *JoinRequest) String() string { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()    {}
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_477c448daeb2d28d, []int{4}
}

func (m *JoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinRequest.Unmarshal(m, b)
}
func (m *JoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinRequest.Marshal(b, m, deterministic)
}
func (m *JoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequest.Merge(m, src)
}
func (m *JoinRequest) XXX_Size() int {
	return xxx_messageInfo_JoinRequest.Size(m)
}
func (m *JoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequest proto.InternalMessageInfo

func (m *JoinRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JoinRequest) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *JoinRequest) GetProductUrl() string {
	if m != nil {
		return m.ProductUrl
	}
	return ""
}

func (m *JoinRequest) GetDefaultHandler() string {
	if m != nil {
		return m.DefaultHandler
	}
	return ""
}

func (m *JoinRequest) GetProtobufName() string {
	if m != nil {
		return m.ProtobufName
	}
	return ""
}

// Request to join response from controller to device.
type JoinResponse struct {
	// Server's name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Server's timestamp
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinResponse) Reset()         { *m = JoinResponse{} }
func (m *JoinResponse) String() string { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()    {}
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_477c448daeb2d28d, []int{5}
}

func (m *JoinResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinResponse.Unmarshal(m, b)
}
func (m *JoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinResponse.Marshal(b, m, deterministic)
}
func (m *JoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinResponse.Merge(m, src)
}
func (m *JoinResponse) XXX_Size() int {
	return xxx_messageInfo_JoinResponse.Size(m)
}
func (m *JoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinResponse proto.InternalMessageInfo

func (m *JoinResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JoinResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Deveice request to leave IoT network
type LeaveRequest struct {
	Reason               string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveRequest) Reset()         { *m = LeaveRequest{} }
func (m *LeaveRequest) String() string { return proto.CompactTextString(m) }
func (*LeaveRequest) ProtoMessage()    {}
func (*LeaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_477c448daeb2d28d, []int{6}
}

func (m *LeaveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveRequest.Unmarshal(m, b)
}
func (m *LeaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveRequest.Marshal(b, m, deterministic)
}
func (m *LeaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveRequest.Merge(m, src)
}
func (m *LeaveRequest) XXX_Size() int {
	return xxx_messageInfo_LeaveRequest.Size(m)
}
func (m *LeaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveRequest proto.InternalMessageInfo

func (m *LeaveRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Controller response to leave network request
type LeaveResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveResponse) Reset()         { *m = LeaveResponse{} }
func (m *LeaveResponse) String() string { return proto.CompactTextString(m) }
func (*LeaveResponse) ProtoMessage()    {}
func (*LeaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_477c448daeb2d28d, []int{7}
}

func (m *LeaveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveResponse.Unmarshal(m, b)
}
func (m *LeaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveResponse.Marshal(b, m, deterministic)
}
func (m *LeaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveResponse.Merge(m, src)
}
func (m *LeaveResponse) XXX_Size() int {
	return xxx_messageInfo_LeaveResponse.Size(m)
}
func (m *LeaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("openiot.EncryptionType", EncryptionType_name, EncryptionType_value)
	proto.RegisterType((*Header)(nil), "openiot.Header")
	proto.RegisterType((*MessageInfo)(nil), "openiot.MessageInfo")
	proto.RegisterType((*KeyExchangeRequest)(nil), "openiot.KeyExchangeRequest")
	proto.RegisterType((*KeyExchangeResponse)(nil), "openiot.KeyExchangeResponse")
	proto.RegisterType((*JoinRequest)(nil), "openiot.JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "openiot.JoinResponse")
	proto.RegisterType((*LeaveRequest)(nil), "openiot.LeaveRequest")
	proto.RegisterType((*LeaveResponse)(nil), "openiot.LeaveResponse")
}

func init() {
	proto.RegisterFile("openiot/system.proto", fileDescriptor_477c448daeb2d28d)
}

var fileDescriptor_477c448daeb2d28d = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4d, 0x8f, 0xd3, 0x3c,
	0x10, 0x80, 0x5f, 0x6f, 0xb2, 0xdd, 0xcd, 0xf4, 0x63, 0xfb, 0x9a, 0xaf, 0x08, 0x90, 0x08, 0x41,
	0x82, 0x88, 0x43, 0x91, 0x40, 0xdc, 0xb7, 0xad, 0x2a, 0xb6, 0xb0, 0xac, 0x16, 0x03, 0xe7, 0xc8,
	0x4d, 0xa6, 0x6d, 0xd8, 0xc6, 0x09, 0xb6, 0x53, 0x91, 0x5f, 0xc1, 0x85, 0x9f, 0xc2, 0x0f, 0x44,
	0x71, 0xdc, 0x2e, 0x95, 0xb8, 0xcd, 0x3c, 0x99, 0xcc, 0x3c, 0x1e, 0x1b, 0xee, 0x16, 0x25, 0x8a,
	0xac, 0xd0, 0xaf, 0x54, 0xad, 0x34, 0xe6, 0xa3, 0x52, 0x16, 0xba, 0xa0, 0x27, 0x96, 0x86, 0xbf,
	0x08, 0x74, 0x2e, 0x90, 0xa7, 0x28, 0xe9, 0x23, 0xf0, 0x52, 0xdc, 0x66, 0x09, 0xc6, 0x59, 0xea,
	0xa7, 0x01, 0x89, 0x5c, 0x76, 0xda, 0x82, 0x79, 0x4a, 0x87, 0xe0, 0x24, 0x32, 0xf1, 0x31, 0x20,
	0xd1, 0x09, 0x6b, 0x42, 0xfa, 0x14, 0x7a, 0x37, 0x58, 0xc7, 0xf8, 0x23, 0x59, 0x73, 0xb1, 0x42,
	0x7f, 0x19, 0x90, 0xe8, 0x94, 0x75, 0x6f, 0xb0, 0x9e, 0x59, 0xd4, 0x94, 0x7c, 0x2b, 0x32, 0x11,
	0x4b, 0xfc, 0x5e, 0xa1, 0xd2, 0xfe, 0xaa, 0x2d, 0x69, 0x18, 0x6b, 0x11, 0xbd, 0x07, 0x1d, 0x8e,
	0x2a, 0xce, 0xb6, 0xfe, 0x3a, 0x20, 0x51, 0x8f, 0x1d, 0x73, 0x54, 0xf3, 0x6d, 0xf8, 0x09, 0xba,
	0x1f, 0x51, 0x29, 0xbe, 0xc2, 0xb9, 0x58, 0x16, 0xf4, 0x21, 0x9c, 0xaa, 0xe6, 0x07, 0x91, 0xa0,
	0x4f, 0x02, 0x12, 0xf5, 0xd9, 0x3e, 0xa7, 0x14, 0x5c, 0x9d, 0xe5, 0xe8, 0x1f, 0x19, 0x6e, 0xe2,
	0x86, 0xa5, 0x5c, 0xa3, 0xef, 0xb4, 0xac, 0x89, 0xc3, 0x9f, 0x04, 0xe8, 0x87, 0x5b, 0xb9, 0x9d,
	0xc0, 0xff, 0xe0, 0xa6, 0xeb, 0xb8, 0x34, 0x6d, 0x5d, 0xe6, 0xa4, 0xeb, 0x6b, 0x8b, 0x56, 0xa6,
	0xa3, 0x41, 0xef, 0x2c, 0xe2, 0xbe, 0x13, 0x38, 0x51, 0xbf, 0x41, 0x63, 0x7a, 0x0e, 0x67, 0x28,
	0x12, 0x59, 0x97, 0x3a, 0x2b, 0x44, 0xac, 0xeb, 0x12, 0x7d, 0x37, 0x20, 0xd1, 0xe0, 0xf5, 0x83,
	0x91, 0x5d, 0xee, 0x68, 0xb6, 0xff, 0xfe, 0xa5, 0x2e, 0x91, 0x0d, 0xf0, 0x20, 0x0f, 0x23, 0xb8,
	0x73, 0x20, 0xa4, 0xca, 0x42, 0x28, 0xb4, 0xb3, 0x16, 0x3e, 0xd9, 0xcd, 0x9a, 0x84, 0xbf, 0x09,
	0x74, 0xdf, 0xff, 0xb5, 0x35, 0x0a, 0xae, 0xe0, 0x79, 0xbb, 0x0b, 0x8f, 0x99, 0x98, 0x86, 0xd0,
	0xcb, 0xb9, 0xa8, 0x96, 0x3c, 0xd1, 0x95, 0x44, 0x69, 0xec, 0x3d, 0x76, 0xc0, 0xe8, 0x13, 0xe8,
	0x96, 0xb2, 0x48, 0xab, 0x44, 0xc7, 0x95, 0xdc, 0x98, 0xf5, 0x78, 0x0c, 0x2c, 0xfa, 0x2a, 0x37,
	0xf4, 0x05, 0x9c, 0xa5, 0xb8, 0xe4, 0xd5, 0x46, 0xc7, 0x6b, 0x2e, 0xd2, 0x0d, 0x4a, 0x73, 0x28,
	0x8f, 0x0d, 0x2c, 0xbe, 0x68, 0x29, 0x7d, 0x06, 0x7d, 0xf3, 0x92, 0x16, 0xd5, 0x32, 0x36, 0x2a,
	0xc7, 0xed, 0xb8, 0x1d, 0xbc, 0xe2, 0x39, 0x86, 0xe7, 0xd0, 0x6b, 0xad, 0xed, 0xc9, 0xfe, 0xa5,
	0xfd, 0x18, 0xbc, 0xe6, 0xca, 0x94, 0xe6, 0x79, 0x69, 0x9c, 0x1d, 0x76, 0x0b, 0xc2, 0xe7, 0xd0,
	0xbb, 0x44, 0xbe, 0xdd, 0xdf, 0xd6, 0x7d, 0xe8, 0x48, 0xe4, 0xaa, 0x10, 0xb6, 0x87, 0xcd, 0xc2,
	0x33, 0xe8, 0xdb, 0xba, 0x76, 0xd4, 0xcb, 0xb7, 0x30, 0x38, 0xdc, 0x3e, 0xf5, 0xe0, 0xf8, 0xfa,
	0x72, 0x3c, 0xbf, 0x1a, 0xfe, 0x47, 0xbb, 0x70, 0x32, 0x9e, 0x7d, 0x8e, 0x67, 0xd3, 0xc9, 0x90,
	0xec, 0x92, 0xe9, 0x64, 0x3a, 0x3c, 0x5a, 0x74, 0x8c, 0xff, 0x9b, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x7f, 0xf0, 0x14, 0x61, 0x36, 0x03, 0x00, 0x00,
}
