// Code generated by protoc-gen-go. DO NOT EDIT.
// source: openiot/common.proto

package openiot

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Header struct {
	// Unique (at least at given local network) device ID. It must always
	// be un-encrypted to allow device/controller find decryption key.
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Encryption type of followed messages
	//
	// Types that are valid to be assigned to Encryption:
	//	*Header_Plain
	//	*Header_AesEcb
	//	*Header_AesCbc
	Encryption           isHeader_Encryption `protobuf_oneof:"encryption"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aeeb5b759bd5053, []int{0}
}

func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

type isHeader_Encryption interface {
	isHeader_Encryption()
}

type Header_Plain struct {
	Plain bool `protobuf:"varint,5,opt,name=plain,proto3,oneof"`
}

type Header_AesEcb struct {
	AesEcb bool `protobuf:"varint,6,opt,name=aes_ecb,json=aesEcb,proto3,oneof"`
}

type Header_AesCbc struct {
	AesCbc []byte `protobuf:"bytes,7,opt,name=aes_cbc,json=aesCbc,proto3,oneof"`
}

func (*Header_Plain) isHeader_Encryption() {}

func (*Header_AesEcb) isHeader_Encryption() {}

func (*Header_AesCbc) isHeader_Encryption() {}

func (m *Header) GetEncryption() isHeader_Encryption {
	if m != nil {
		return m.Encryption
	}
	return nil
}

func (m *Header) GetPlain() bool {
	if x, ok := m.GetEncryption().(*Header_Plain); ok {
		return x.Plain
	}
	return false
}

func (m *Header) GetAesEcb() bool {
	if x, ok := m.GetEncryption().(*Header_AesEcb); ok {
		return x.AesEcb
	}
	return false
}

func (m *Header) GetAesCbc() []byte {
	if x, ok := m.GetEncryption().(*Header_AesCbc); ok {
		return x.AesCbc
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Header) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Header_Plain)(nil),
		(*Header_AesEcb)(nil),
		(*Header_AesCbc)(nil),
	}
}

type Message struct {
	// Auto-incremented sequence number to drop duplicates
	// uint32 should last about 136 years even if device / controller
	// will be sending messages every second
	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// CRC of followed message
	Crc uint32 `protobuf:"varint,2,opt,name=crc,proto3" json:"crc,omitempty"`
	// Type of followed message
	MessageType          uint32   `protobuf:"varint,3,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aeeb5b759bd5053, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Message) GetCrc() uint32 {
	if m != nil {
		return m.Crc
	}
	return 0
}

func (m *Message) GetMessageType() uint32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func init() {
	proto.RegisterType((*Header)(nil), "openiot.Header")
	proto.RegisterType((*Message)(nil), "openiot.Message")
}

func init() { proto.RegisterFile("openiot/common.proto", fileDescriptor_5aeeb5b759bd5053) }

var fileDescriptor_5aeeb5b759bd5053 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0xb1, 0x4b, 0xc5, 0x30,
	0x10, 0x87, 0x8d, 0xcf, 0xd7, 0xd6, 0xb3, 0x82, 0x04, 0x91, 0xa8, 0x4b, 0x7d, 0x53, 0x27, 0x1d,
	0xfc, 0x0f, 0x14, 0xa1, 0x0e, 0x2e, 0xc5, 0xc9, 0xa5, 0x24, 0xd7, 0x1f, 0x12, 0xb0, 0x49, 0x6c,
	0xaa, 0xd0, 0xd1, 0xff, 0x5c, 0x6c, 0xe3, 0xdb, 0xee, 0xfb, 0x3e, 0x0e, 0xee, 0xe8, 0xdc, 0x07,
	0x38, 0xeb, 0xa7, 0x3b, 0xf6, 0xc3, 0xe0, 0xdd, 0x6d, 0x18, 0xfd, 0xe4, 0x65, 0x9e, 0xec, 0xee,
	0x47, 0x50, 0xd6, 0x40, 0xf7, 0x18, 0xe5, 0x35, 0x1d, 0xf7, 0xf8, 0xb6, 0x8c, 0xce, 0xf6, 0x4a,
	0x54, 0xa2, 0x3e, 0x6a, 0x8b, 0x55, 0x3c, 0xf7, 0xf2, 0x82, 0xb6, 0xe1, 0x43, 0x5b, 0xa7, 0xb6,
	0x95, 0xa8, 0x8b, 0xe6, 0xa0, 0x5d, 0x51, 0x5e, 0x52, 0xae, 0x11, 0x3b, 0xb0, 0x51, 0x59, 0x2a,
	0x99, 0x46, 0x7c, 0x62, 0xf3, 0x9f, 0xd8, 0xb0, 0xca, 0x2b, 0x51, 0x97, 0x29, 0x3d, 0x1a, 0x7e,
	0x28, 0x89, 0xe0, 0x78, 0x9c, 0xc3, 0x64, 0xbd, 0xdb, 0xbd, 0x51, 0xfe, 0x82, 0x18, 0xf5, 0x3b,
	0xe4, 0x15, 0x15, 0x11, 0x9f, 0x5f, 0x70, 0x8c, 0xe5, 0x84, 0xd3, 0x76, 0xcf, 0xf2, 0x8c, 0x36,
	0x3c, 0xb2, 0x3a, 0x5c, 0xf4, 0xdf, 0x28, 0x6f, 0xa8, 0x1c, 0xd6, 0xc5, 0x6e, 0x9a, 0x03, 0xd4,
	0x66, 0x49, 0x27, 0xc9, 0xbd, 0xce, 0x01, 0x26, 0x5b, 0xfe, 0xbd, 0xff, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x52, 0xfb, 0x52, 0x25, 0x07, 0x01, 0x00, 0x00,
}
