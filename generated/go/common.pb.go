// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package devices

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	// Regular message type e.g. status report, status change, etc
	MessageType_REGULAR MessageType = 0
	// Network join state machine
	// ----------------------------------------------------
	// | client                   |       server          |
	// |---------------------------------------------------
	// | JOIN_REQUEST ->          |                       |
	// |                          | <- JOIN_REQUEST_OFFER |
	// | JOIN_REQUEST_ACCEPT ->   |                       |
	// |                          | <- JOIN_RESPONSE_ACK  |
	// ----------------------------------------------------
	// If server is willing devices to join it responds with offer
	// otherwise simply ignores request.
	// During device inclusion participans do key exchange
	// using Diffieâ€“Hellman
	// Server response to JOIN_REQUEST
	// New device accepts JOIN_REQUEST_OFFER
	MessageType_JOIN_REQUEST        MessageType = 5
	MessageType_JOIN_RESPONSE_OFFER MessageType = 6
	MessageType_JOIN_REQUEST_ACCEPT MessageType = 7
	MessageType_JOIN_RESPONSE_ACK   MessageType = 8
	// Leave network state machine
	// ----------------------------------------------
	// | client             |       server          |
	// |---------------------------------------------
	// | LEAVE_REQUEST ->   |                       |
	// |                    | <- LEAVE_RESPONSE_ACK |
	// ----------------------------------------------
	MessageType_LEAVE_REQUEST      MessageType = 10
	MessageType_LEAVE_RESPONSE_ACK MessageType = 11
)

var MessageType_name = map[int32]string{
	0:  "REGULAR",
	5:  "JOIN_REQUEST",
	6:  "JOIN_RESPONSE_OFFER",
	7:  "JOIN_REQUEST_ACCEPT",
	8:  "JOIN_RESPONSE_ACK",
	10: "LEAVE_REQUEST",
	11: "LEAVE_RESPONSE_ACK",
}

var MessageType_value = map[string]int32{
	"REGULAR":             0,
	"JOIN_REQUEST":        5,
	"JOIN_RESPONSE_OFFER": 6,
	"JOIN_REQUEST_ACCEPT": 7,
	"JOIN_RESPONSE_ACK":   8,
	"LEAVE_REQUEST":       10,
	"LEAVE_RESPONSE_ACK":  11,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

type Message struct {
	// An unique device id (within given LoRa home network)
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Sequence is an auto incremented value
	// Devices (either server/client) should keep sequence number
	// and process messages exactly once
	// (reject all messages with sequence less than already processed)
	// Even if device will send updates every second
	// counter will last for ~130 years.
	Sequence uint32 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Type of message embedded into details
	Type MessageType `protobuf:"varint,3,opt,name=type,proto3,enum=devices.MessageType" json:"type,omitempty"`
	// Embedded protobuf based on type / device_id
	Details              []byte   `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *Message) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Message) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_REGULAR
}

func (m *Message) GetDetails() []byte {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterEnum("devices.MessageType", MessageType_name, MessageType_value)
	proto.RegisterType((*Message)(nil), "devices.Message")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcd, 0x4e, 0x83, 0x40,
	0x14, 0x46, 0x1d, 0xad, 0x05, 0x2f, 0xd4, 0x4c, 0xaf, 0x7f, 0x13, 0xdd, 0x10, 0x57, 0x13, 0x17,
	0x2c, 0xf4, 0x09, 0x08, 0x99, 0x9a, 0x6a, 0x2d, 0x75, 0xa0, 0x6e, 0x49, 0x85, 0x1b, 0x43, 0x62,
	0x0b, 0x3a, 0x68, 0xd2, 0x17, 0xf0, 0x39, 0x7c, 0x54, 0x13, 0x4a, 0x1b, 0x5c, 0x7e, 0x67, 0xce,
	0x9c, 0xc5, 0x05, 0x37, 0x2b, 0x97, 0xcb, 0x72, 0xe5, 0x57, 0x9f, 0x65, 0x5d, 0xa2, 0x95, 0xd3,
	0x77, 0x91, 0x91, 0xb9, 0xfe, 0x61, 0x60, 0x3d, 0x91, 0x31, 0x8b, 0x37, 0xc2, 0x2b, 0x38, 0xda,
	0xe0, 0xb4, 0xc8, 0x05, 0xf3, 0x98, 0xec, 0x69, 0x7b, 0x03, 0xc6, 0x39, 0x5e, 0x82, 0x6d, 0xe8,
	0xe3, 0x8b, 0x56, 0x19, 0x89, 0x7d, 0x8f, 0xc9, 0x81, 0xde, 0x6d, 0x94, 0xd0, 0xab, 0xd7, 0x15,
	0x89, 0x03, 0x8f, 0xc9, 0xe3, 0xdb, 0x53, 0xbf, 0x8d, 0xfb, 0x6d, 0x38, 0x59, 0x57, 0xa4, 0x1b,
	0x03, 0x05, 0x58, 0x39, 0xd5, 0x8b, 0xe2, 0xdd, 0x88, 0x9e, 0xc7, 0xa4, 0xab, 0xb7, 0xf3, 0xe6,
	0x97, 0x81, 0xd3, 0xf1, 0xd1, 0x01, 0x4b, 0xab, 0xfb, 0xf9, 0x24, 0xd0, 0x7c, 0x0f, 0x39, 0xb8,
	0x0f, 0xd1, 0x78, 0x9a, 0x6a, 0xf5, 0x3c, 0x57, 0x71, 0xc2, 0x0f, 0xf1, 0x02, 0x4e, 0x5a, 0x12,
	0xcf, 0xa2, 0x69, 0xac, 0xd2, 0x68, 0x34, 0x52, 0x9a, 0xf7, 0x3b, 0x0f, 0x8d, 0x9a, 0x06, 0x61,
	0xa8, 0x66, 0x09, 0xb7, 0xf0, 0x0c, 0x86, 0xff, 0x7f, 0x04, 0xe1, 0x23, 0xb7, 0x71, 0x08, 0x83,
	0x89, 0x0a, 0x5e, 0xd4, 0xae, 0x0d, 0x78, 0x0e, 0xb8, 0x45, 0x1d, 0xd5, 0x79, 0xed, 0x37, 0xb7,
	0xbb, 0xfb, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xe9, 0xdd, 0x19, 0x4b, 0x01, 0x00, 0x00,
}
